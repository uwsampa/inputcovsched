To compile uclibc for KLEE:

./configure --with-llvm=<llvm-root-dir>
make

You do not need to run `make install`, since klee will pull the
libraries directly from this directory.

You can also add optional flags by running adding KLEE_CFLAGS=... to
the end of the make line above. In particular, to compile printf,
which is excluded by default, use:

make KLEE_CFLAGS="-DKLEE_SYM_PRINTF"

To compile in optimized mode, add "DODEBUG=n".  This will strip
all debugging symbols.

===============================================================================

To compile uclibc (0.9.29) with LLVM, we made the following changes
(also see README.klee.diff for a full diff):

1) In Rules.mak, set the vars below to the below values instead of the normal gcc toolchain:
CC         = llvm-gcc --emit-llvm 
AR         = llvm-ar
LD         = llvm-ld
NM         = llvm-nm
STRIPTOOL  = true

2) Made a few small code changes (grep for "DWD" or "klee" to see them)
   (a) Changed "NULL"s to "0" in the definition of _stio_streams in libc/stdio/_stdio.c
       to work-around a compile error.
   (b) Disabled inline assembly code in libc/stdlib/malloc-standard/malloc.c
   (c) Modified include/ctype.h to define an _ISbit macro for big-endian machines

3) Configured uclibc to meet the following criteria:
   (a) We want to compile non-architecture specific string functions since LLVM does
       not like inline asm (I believe):
       UCLIBC_HAS_STRING_ARCHOPT is not set

   (b) We enabled Extended Locale with the followings options to get __ctype_b_loc
       which is needed by strtoul and others:
       UCLIBC_HAS_WCHAR=y
       UCLIBC_HAS_LOCALE=y
       UCLIBC_PREGENERATED_LOCALE_DATA=y
       UCLIBC_HAS_XLOCALE=y

   (c) We want pthreads and used the only option that appears to avoid reliance on
       assembly code:
       LINUXTHREADS_OLD=y
       UCLIBC_HAS_THREADS=y
